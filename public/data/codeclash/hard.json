[
    {
      "id": 1,
      "title": "Longest Substring Without Repeating Characters",
      "description": "Given a string, find the length of the longest substring without repeating characters.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function lengthOfLongestSubstring(s) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["abcabcbb"], "output": "3" },
        { "input": ["bbbbb"], "output": "1" },
        { "input": ["pwwkew"], "output": "3" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 2,
      "title": "Word Ladder Steps",
      "description": "Given two words and a dictionary, find the length of the shortest transformation sequence from beginWord to endWord, where only one letter can be changed at a time and each transformed word must exist in the dictionary.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function ladderLength(beginWord, endWord, wordList) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["hit", "cog", ["hot","dot","dog","lot","log","cog"]], "output": "5" },
        { "input": ["hit", "cog", ["hot","dot","dog","lot","log"]], "output": "0" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 3,
      "title": "Rotate Image",
      "description": "Given an n x n 2D matrix, rotate it 90 degrees clockwise in-place.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function rotate(matrix) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[1,2,3],[4,5,6],[7,8,9]]], "output": "[[7,4,1],[8,5,2],[9,6,3]]" },
        { "input": [[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]], "output": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 4,
      "title": "Trapping Rain Water",
      "description": "Given n non-negative integers representing elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function trap(height) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[0,1,0,2,1,0,1,3,2,1,2,1]], "output": "6" },
        { "input": [[4,2,0,3,2,5]], "output": "9" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 5,
      "title": "Merge Intervals",
      "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function merge(intervals) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[1,3],[2,6],[8,10],[15,18]]], "output": "[[1,6],[8,10],[15,18]]" },
        { "input": [[[1,4],[4,5]]], "output": "[[1,5]]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 6,
      "title": "Longest Consecutive Sequence",
      "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function longestConsecutive(nums) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[100,4,200,1,3,2]], "output": "4" },
        { "input": [[0,3,7,2,5,8,4,6,0,1]], "output": "9" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 7,
      "title": "Permutations II",
      "description": "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function permuteUnique(nums) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[1,1,2]], "output": "[[1,1,2],[1,2,1],[2,1,1]]" },
        { "input": [[1,2,3]], "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 8,
      "title": "Minimum Window Substring",
      "description": "Given two strings s and t, return the minimum window substring of s such that every character in t appears in the window. If there is no such substring, return the empty string.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minWindow(s, t) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["ADOBECODEBANC", "ABC"], "output": "BANC" },
        { "input": ["a", "a"], "output": "a" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 9,
      "title": "Sudoku Solver",
      "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function solveSudoku(board) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]], "output": "[[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],...]"}
      ],
      "timeLimit": 3000
    },
    {
      "id": 10,
      "title": "Serialize and Deserialize Binary Tree",
      "description": "Design an algorithm to serialize and deserialize a binary tree. You must ensure that your serialization and deserialization algorithms are deterministic.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function serialize(root) {\n  // Your code here\n}\nfunction deserialize(data) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[1,2,3,null,null,4,5]], "output": "[1,2,3,null,null,4,5]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 11,
      "title": "N-Queens",
      "description": "Place n queens on an n√ón chessboard so that no two queens attack each other. Return all distinct solutions.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function solveNQueens(n) {\n  // Your code here\n}",
      "testCases": [
        { "input": [4], "output": "[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]" },
        { "input": [1], "output": "[[\"Q\"]]" }
      ],
      "timeLimit": 3000
    },
    {
        "id": 12,
        "title": "Leap Year Check",
        "description": "Return true if a given year is a leap year.",
        "difficulty": "Easy",
        "points": 10,
        "input": [2020],
        "output": "true",
        "timeLimit": 2000,
        "starterCode": "function isLeapYear(year) {\n  // write code here\n}"
      },
    {
      "id": 13,
      "title": "Alien Dictionary",
      "description": "Given a list of words from an alien language, derive the order of the letters.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function alienOrder(words) {\n  // Your code here\n}",
      "testCases": [
        { "input": [["wrt","wrf","er","ett","rftt"]], "output": "wertf" },
        { "input": [["z","x"]], "output": "zx" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 14,
      "title": "Sliding Window Maximum",
      "description": "You are given an array nums and an integer k. There is a sliding window of size k moving from the left to the right. Return the maximum in each window.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function maxSlidingWindow(nums, k) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[1,3,-1,-3,5,3,6,7], 3], "output": "[3,3,5,5,6,7]" },
        { "input": [[1], 1], "output": "[1]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 15,
      "title": "Burst Balloons",
      "description": "Given n balloons, each balloon has a number on it. You are asked to burst all the balloons. If you burst balloon i you get nums[left] * nums[i] * nums[right] coins. Return the maximum coins you can collect.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function maxCoins(nums) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[3,1,5,8]], "output": "167" },
        { "input": [[1,5]], "output": "10" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 16,
      "title": "Palindrome Partitioning II",
      "description": "Given a string s, partition s such that every substring is a palindrome. Return the minimum cuts needed for a palindrome partitioning.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minCut(s) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["aab"], "output": "1" },
        { "input": ["a"], "output": "0" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 17,
      "title": "Course Schedule III",
      "description": "There are n different online courses. You are given an array where courses[i] = [duration, lastDay]. Return the maximum number of courses you can take.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function scheduleCourse(courses) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[100,200],[200,1300],[1000,1250],[2000,3200]]], "output": "3" },
        { "input": [[[1,2]]], "output": "1" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 18,
      "title": "Regular Expression Matching",
      "description": "Implement regular expression matching with support for '.' and '*'.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function isMatch(s, p) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["aa","a"], "output": "false" },
        { "input": ["aa","a*"], "output": "true" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 19,
      "title": "Wildcard Matching",
      "description": "Implement wildcard pattern matching with support for '?' and '*'.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function isWildcardMatch(s, p) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["aa","a"], "output": "false" },
        { "input": ["aa","*"], "output": "true" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 20,
      "title": "Word Break II",
      "description": "Given a string s and a dictionary of words, add spaces in s to construct a sentence where each word is valid. Return all possible sentences.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function wordBreak(s, wordDict) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["catsanddog", ["cat","cats","and","sand","dog"]], "output": "[\"cats and dog\",\"cat sand dog\"]" },
        { "input": ["pineapplepenapple", ["apple","pen","applepen","pine","pineapple"]], "output": "[\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 21,
      "title": "Longest Increasing Path in a Matrix",
      "description": "Given an m x n integers matrix, return the length of the longest increasing path in matrix.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function longestIncreasingPath(matrix) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[9,9,4],[6,6,8],[2,1,1]]], "output": "4" },
        { "input": [[[3,4,5],[3,2,6],[2,2,1]]], "output": "4" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 22,
      "title": "Word Ladder II",
      "description": "Return all shortest transformation sequences from beginWord to endWord, given a dictionary of words.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function findLadders(beginWord, endWord, wordList) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["hit","cog",["hot","dot","dog","lot","log","cog"]], "output": "[[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 23,
      "title": "Minimum Window Subsequence",
      "description": "Given strings S and T, find the minimum (contiguous) substring W of S, so that T is a subsequence of W.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minWindowSubsequence(S, T) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["abcdebdde","bde"], "output": "bcde" },
        { "input": ["jmeqksfrsdcmsiwvaovztaqenprpvnbstl","u"], "output": "u" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 24,
      "title": "Kth Smallest in Sorted Matrix",
      "description": "Given an n x n matrix where each row and column is sorted, return the kth smallest element.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function kthSmallest(matrix, k) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[1,5,9],[10,11,13],[12,13,15]], 8], "output": "13" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 25,
      "title": "Data Stream as Disjoint Intervals",
      "description": "Given a data stream, insert numbers and return disjoint intervals as they appear.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "class SummaryRanges {\n  constructor() {}\n  addNum(value) {\n    // Your code here\n  }\n  getIntervals() {\n    // Your code here\n  }\n}",
      "testCases": [
        { "input": [["addNum",1],["addNum",3],["addNum",7],["addNum",2],["addNum",6],["getIntervals"]], "output": "[[1,3],[6,7]]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 26,
      "title": "Largest Rectangle in Histogram",
      "description": "Given an array of heights, return the area of the largest rectangle in the histogram.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function largestRectangleArea(heights) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[2,1,5,6,2,3]], "output": "10" },
        { "input": [[2,4]], "output": "4" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 27,
      "title": "Serialize and Deserialize Binary Tree",
      "description": "Design an algorithm to serialize and deserialize a binary tree.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "class Codec {\n  serialize(root) {\n    // Your code here\n  }\n  deserialize(data) {\n    // Your code here\n  }\n}",
      "testCases": [
        { "input": ["[1,2,3,null,null,4,5]"], "output": "[1,2,3,null,null,4,5]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 28,
      "title": "LFU Cache",
      "description": "Design and implement a Least Frequently Used (LFU) cache with get and put methods.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "class LFUCache {\n  constructor(capacity) {\n    // Your code here\n  }\n  get(key) {\n    // Your code here\n  }\n  put(key, value) {\n    // Your code here\n  }\n}",
      "testCases": [
        { "input": [["LFUCache",2],["put",1,1],["put",2,2],["get",1],["put",3,3],["get",2],["get",3]], "output": "[null,null,null,1,null,-1,3]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 29,
      "title": "Count of Smaller Numbers After Self",
      "description": "Given an integer array nums, return the number of smaller elements to the right of each element.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function countSmaller(nums) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[5,2,6,1]], "output": "[2,1,1,0]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 30,
      "title": "Trapping Rain Water II",
      "description": "Given a 2D height map, compute how much water it can trap after raining.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function trapRainWater(heightMap) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]], "output": "4" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 31,
      "title": "Longest Consecutive Sequence",
      "description": "Given an unsorted array, find the length of the longest consecutive elements sequence.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function longestConsecutive(nums) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[100,4,200,1,3,2]], "output": "4" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 32,
      "title": "Minimum Cost to Merge Stones",
      "description": "Given an array of integers stones and an integer K, merge the stones into one pile with the minimum cost.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function mergeStones(stones, K) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[3,2,4,1], 2], "output": "20" },
        { "input": [[3,2,4,1], 3], "output": "-1" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 33,
      "title": "Shortest Palindrome",
      "description": "Find the shortest palindrome by adding characters in front of a given string.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function shortestPalindrome(s) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["aacecaaa"], "output": "aaacecaaa" },
        { "input": ["abcd"], "output": "dcbabcd" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 34,
      "title": "Max Points on a Line",
      "description": "Given n points on a 2D plane, return the maximum number of points that lie on the same straight line.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function maxPoints(points) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[1,1],[2,2],[3,3]]], "output": "3" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 35,
      "title": "Basic Calculator III",
      "description": "Implement a basic calculator to evaluate a string expression with parentheses and operators +, -, *, /.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function calculate(s) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["2*(5+5*2)/3+(6/2+8)"], "output": "21" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 36,
      "title": "Paint House II",
      "description": "There are a row of houses, each can be painted with one of k colors. Return the minimum cost to paint all houses such that no two adjacent houses have the same color.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minCostII(costs) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[1,5,3],[2,9,4]]], "output": "5" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 37,
      "title": "Russian Doll Envelopes",
      "description": "You have a number of envelopes with widths and heights. Return the maximum number you can Russian doll.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function maxEnvelopes(envelopes) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[5,4],[6,4],[6,7],[2,3]]], "output": "3" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 38,
      "title": "Skyline Problem",
      "description": "Given the skyline of a city, return the key points in order.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function getSkyline(buildings) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]], "output": "[[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 39,
      "title": "Super Egg Drop",
      "description": "You are given k eggs and you have access to a building with n floors. Return the minimum number of moves needed.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function superEggDrop(k, n) {\n  // Your code here\n}",
      "testCases": [
        { "input": [1,2], "output": "2" },
        { "input": [2,6], "output": "3" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 40,
      "title": "Dungeon Game",
      "description": "The knight must rescue the princess from the dungeon. Calculate the knight's minimum initial health.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function calculateMinimumHP(dungeon) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[-2,-3,3],[-5,-10,1],[10,30,-5]]], "output": "7" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 41,
      "title": "Palindrome Pairs",
      "description": "Given a list of words, find all pairs of distinct indices where the concatenation is a palindrome.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function palindromePairs(words) {\n  // Your code here\n}",
      "testCases": [
        { "input": [["abcd","dcba","lls","s","sssll"]], "output": "[[0,1],[1,0],[3,2],[2,4]]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 42,
      "title": "Split Array Largest Sum",
      "description": "Split an array into m non-empty subarrays to minimize the largest sum among these subarrays.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function splitArray(nums, m) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[7,2,5,10,8], 2], "output": "18" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 43,
      "title": "Create Maximum Number",
      "description": "Given two arrays of digits and an integer k, create the maximum number of length k from digits of the two arrays.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function maxNumber(nums1, nums2, k) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[3,4,6,5],[9,1,2,5,8,3],5], "output": "[9,8,6,5,3]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 44,
      "title": "Burst Balloons",
      "description": "Given n balloons, return the maximum coins you can collect by bursting them wisely.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function maxCoins(nums) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[3,1,5,8]], "output": "167" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 45,
      "title": "Wild Card Matching",
      "description": "Implement wildcard pattern matching with '?' and '*'.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function isMatch(s, p) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["aa","a"], "output": "false" },
        { "input": ["aa","*"], "output": "true" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 46,
      "title": "Regular Expression Matching",
      "description": "Implement regular expression matching with support for '.' and '*'.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function isMatch(s, p) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["mississippi","mis*is*p*."], "output": "false" },
        { "input": ["aab","c*a*b"], "output": "true" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 47,
      "title": "Shortest Path in a Grid with Obstacles Elimination",
      "description": "Find the shortest path from top-left to bottom-right allowing at most k obstacles to be eliminated.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function shortestPath(grid, k) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], 1], "output": "6" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 48,
      "title": "N-Queens II",
      "description": "Return the number of distinct solutions to the n-queens puzzle.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function totalNQueens(n) {\n  // Your code here\n}",
      "testCases": [
        { "input": [4], "output": "2" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 49,
      "title": "Longest Valid Parentheses",
      "description": "Given a string, find the length of the longest valid (well-formed) parentheses substring.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function longestValidParentheses(s) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["(()"], "output": "2" },
        { "input": [")()())"], "output": "4" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 50,
      "title": "Distinct Subsequences",
      "description": "Return the number of distinct subsequences of s equal to t.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function numDistinct(s, t) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["rabbbit","rabbit"], "output": "3" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 51,
      "title": "Maximal Rectangle",
      "description": "Given a 2D binary matrix filled with 0's and 1's, return the area of the largest rectangle containing only 1's.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function maximalRectangle(matrix) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]], "output": "6" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 52,
      "title": "Minimum Window Substring",
      "description": "Given two strings s and t, return the minimum window in s that contains all characters of t.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minWindow(s, t) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["ADOBECODEBANC","ABC"], "output": "BANC" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 53,
      "title": "Edit Distance",
      "description": "Return the minimum number of operations required to convert word1 to word2.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minDistance(word1, word2) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["horse","ros"], "output": "3" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 54,
      "title": "Sliding Window Maximum",
      "description": "Given an array nums and an integer k, return the maximum sliding window.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function maxSlidingWindow(nums, k) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[1,3,-1,-3,5,3,6,7], 3], "output": "[3,3,5,5,6,7]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 55,
      "title": "Strong Password Checker",
      "description": "Return the minimum steps required to make the password strong.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function strongPasswordChecker(password) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["a"], "output": "5" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 56,
      "title": "Shortest Path Visiting All Nodes",
      "description": "Given an undirected graph, return the length of the shortest path that visits every node.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function shortestPathLength(graph) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[1,2,3],[0],[0],[0]]], "output": "4" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 57,
      "title": "Concatenated Words",
      "description": "Return all words in the given list that are concatenations of at least two shorter words in the list.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function findAllConcatenatedWordsInADict(words) {\n  // Your code here\n}",
      "testCases": [
        { "input": [["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatsdogcat"]], "output": "[\"catsdogcats\",\"dogcatsdog\",\"ratcatsdogcat\"]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 58,
      "title": "Rearrange String k Distance Apart",
      "description": "Rearrange a string so that the same characters are at least distance k apart.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function rearrangeString(s, k) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["aabbcc", 3], "output": "abcabc" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 59,
      "title": "Basic Calculator IV",
      "description": "Given an expression, variables, and values, return the result of the polynomial expression.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function basicCalculatorIV(expression, evalvars, evalints) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["e + 8 - a + 5",["e"],[1]], "output": "[\"-1*a\",\"14\"]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 60,
      "title": "Count Vowels Permutation",
      "description": "Given n, count how many strings of length n can be formed under vowel permutation rules.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function countVowelPermutation(n) {\n  // Your code here\n}",
      "testCases": [
        { "input": [1], "output": "5" },
        { "input": [2], "output": "10" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 61,
      "title": "Word Ladder II",
      "description": "Given two words and a dictionary, return all shortest transformation sequences from beginWord to endWord.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function findLadders(beginWord, endWord, wordList) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["hit", "cog", ["hot","dot","dog","lot","log","cog"]], "output": "[[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]" }
      ],
      "timeLimit": 4000
    },
    {
      "id": 62,
      "title": "Alien Dictionary",
      "description": "Given a list of words sorted lexicographically in an alien language, find the order of the alphabet.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function alienOrder(words) {\n  // Your code here\n}",
      "testCases": [
        { "input": [["wrt","wrf","er","ett","rftt"]], "output": "\"wertf\"" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 63,
      "title": "Word Search II",
      "description": "Given a 2D board and a list of words, find all words in the board.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function findWords(board, words) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], ["oath","pea","eat","rain"]], "output": "[\"oath\",\"eat\"]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 64,
      "title": "Shortest Palindrome",
      "description": "Find the shortest palindrome by adding characters in front of the string.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function shortestPalindrome(s) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["aacecaaa"], "output": "\"aaacecaaa\"" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 65,
      "title": "Longest Increasing Path in a Matrix",
      "description": "Given a matrix, find the length of the longest increasing path.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function longestIncreasingPath(matrix) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[9,9,4],[6,6,8],[2,1,1]]], "output": "4" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 66,
      "title": "Serialize and Deserialize Binary Tree",
      "description": "Design an algorithm to serialize and deserialize a binary tree.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function serialize(root) {\n  // Your code here\n}\n\nfunction deserialize(data) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["root = [1,2,3,null,null,4,5]"], "output": "[1,2,3,null,null,4,5]" }
      ],
      "timeLimit": 4000
    },
    {
      "id": 67,
      "title": "Paint House III",
      "description": "Given houses and colors with costs, paint houses to minimize cost under constraints.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minCost(houses, cost, m, n, target) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[0,0,0,0,0], [[1,10],[10,1],[10,1],[1,10],[5,1]], 5, 2, 3], "output": "9" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 68,
      "title": "Student Attendance Record II",
      "description": "Count the number of possible attendance records with given constraints.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function checkRecord(n) {\n  // Your code here\n}",
      "testCases": [
        { "input": [2], "output": "8" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 69,
      "title": "Binary Tree Cameras",
      "description": "Place cameras on tree nodes to monitor all nodes with minimum cameras.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minCameraCover(root) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["[0,0,null,0,0]"], "output": "1" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 70,
      "title": "Median of Two Sorted Arrays",
      "description": "Find the median of two sorted arrays in O(log(m+n)) time.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function findMedianSortedArrays(nums1, nums2) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[1,3],[2]], "output": "2.0" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 71,
      "title": "Data Stream as Disjoint Intervals",
      "description": "Given a data stream of integers, summarize it as disjoint intervals.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "class SummaryRanges {\n  constructor() {}\n  addNum(val) {\n    // Your code here\n  }\n  getIntervals() {\n    // Your code here\n  }\n}",
      "testCases": [
        { "input": ["addNum(1)","getIntervals()"], "output": "[[1,1]]" }
      ],
      "timeLimit": 4000
    },
    {
      "id": 72,
      "title": "Regex Parser with Plus",
      "description": "Extend regex parser to include '+' quantifier along with '.' and '*'.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function isMatch(s, p) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["aaa","a+"], "output": "true" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 73,
      "title": "Parallel Courses II",
      "description": "Find the minimum number of semesters to complete all courses with prerequisites, taking up to k courses per semester.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minNumberOfSemesters(n, relations, k) {\n  // Your code here\n}",
      "testCases": [
        { "input": [4, [[2,1],[3,1],[1,4]], 2], "output": "3" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 74,
      "title": "K-th Smallest Prime Fraction",
      "description": "Given an array of primes, return the kth smallest fraction.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function kthSmallestPrimeFraction(arr, k) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[1,2,3,5], 3], "output": "[2,5]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 75,
      "title": "Russian Doll Envelopes",
      "description": "Find the maximum number of envelopes that can be nested inside each other.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function maxEnvelopes(envelopes) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[5,4],[6,4],[6,7],[2,3]]], "output": "3" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 76,
      "title": "Minimum Cost to Merge Stones",
      "description": "Merge stones into one pile with minimal cost given merging constraints.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function mergeStones(stones, K) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[3,2,4,1], 2], "output": "20" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 77,
      "title": "Minimum Number of Refueling Stops",
      "description": "Find the minimum refueling stops needed to reach target distance.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minRefuelStops(target, startFuel, stations) {\n  // Your code here\n}",
      "testCases": [
        { "input": [100, 10, [[10,60],[20,30],[30,30],[60,40]]], "output": "2" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 78,
      "title": "Maximum Profit in Job Scheduling",
      "description": "Schedule jobs to maximize profit without overlapping.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function jobScheduling(startTime, endTime, profit) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[1,2,3,3],[3,4,5,6],[50,10,40,70]], "output": "120" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 79,
      "title": "Stone Game II",
      "description": "Determine maximum stones Alice can get in a modified stone game.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function stoneGameII(piles) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[2,7,9,4,4]], "output": "10" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 80,
      "title": "Maximum Sum BST in Binary Tree",
      "description": "Return the maximum sum of all keys of any binary search tree in the binary tree.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function maxSumBST(root) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["[1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]"], "output": "20" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 81,
      "title": "Minimum Window Subsequence",
      "description": "Given strings S and T, find the minimum window in S which contains T as a subsequence.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minWindowSubsequence(S, T) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["abcdebdde", "bde"], "output": "\"bcde\"" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 82,
      "title": "Brace Expansion II",
      "description": "Return all words formed by a sequence of brace expansions in lexicographical order.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function braceExpansionII(expression) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["{a,b}{c,{d,e}}"], "output": "[\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 83,
      "title": "Optimal Account Balancing",
      "description": "Minimize the number of transactions to settle debts among a group of people.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minTransfers(transactions) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[0,1,10],[2,0,5]]], "output": "2" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 84,
      "title": "24 Game",
      "description": "Given four integers, determine if they can be combined using +, -, *, / to get 24.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function judgePoint24(cards) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[4,1,8,7]], "output": "true" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 85,
      "title": "Minimum Moves to Equal Array Elements II",
      "description": "Find the minimum moves to make all array elements equal, where one move increments or decrements an element by 1.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minMoves2(nums) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[1,2,3]], "output": "2" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 86,
      "title": "Split Array with Equal Sum",
      "description": "Determine if an array can be split into four parts with equal sum.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function splitArray(nums) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[1,2,1,2,1,2,1]], "output": "true" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 87,
      "title": "Reverse Pairs",
      "description": "Count the number of reverse pairs where i < j and nums[i] > 2*nums[j].",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function reversePairs(nums) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[1,3,2,3,1]], "output": "2" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 88,
      "title": "Find the Shortest Superstring",
      "description": "Given an array of strings, return the shortest string that contains each string as a substring.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function shortestSuperstring(words) {\n  // Your code here\n}",
      "testCases": [
        { "input": [["alex","loves","leetcode"]], "output": "\"alexlovesleetcode\"" }
      ],
      "timeLimit": 4000
    },
    {
      "id": 89,
      "title": "Cracking the Safe",
      "description": "Find the lexicographically smallest string of length k containing every possible combination of digits [0..n-1] as a substring.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function crackSafe(n, k) {\n  // Your code here\n}",
      "testCases": [
        { "input": [2, 2], "output": "\"00110\"" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 90,
      "title": "Maximum Frequency Stack",
      "description": "Implement a stack-like data structure that pushes and pops the most frequent element.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "class FreqStack {\n  constructor() {}\n  push(val) {\n    // Your code here\n  }\n  pop() {\n    // Your code here\n  }\n}",
      "testCases": [
        { "input": ["push(5)","push(7)","push(5)","push(7)","push(4)","push(5)","pop()","pop()"], "output": "[5,7]" }
      ],
      "timeLimit": 4000
    },
    {
      "id": 91,
      "title": "Closest Binary Search Tree Value II",
      "description": "Return k values in a BST that are closest to a given target.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function closestKValues(root, target, k) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["[4,2,5,1,3]", 3.714286, 2], "output": "[4,3]" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 92,
      "title": "Shortest Path Visiting All Nodes",
      "description": "Return the length of the shortest path that visits every node exactly once.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function shortestPathLength(graph) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[[1,2,3],[0],[0],[0]]], "output": "4" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 93,
      "title": "Super Egg Drop",
      "description": "Given K eggs and N floors, find the minimum number of moves needed to determine the highest floor from which an egg can be dropped without breaking.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function superEggDrop(K, N) {\n  // Your code here\n}",
      "testCases": [
        { "input": [1, 2], "output": "2" }
      ],
      "timeLimit": 4000
    },
    {
      "id": 94,
      "title": "Number of Ways to Paint N √ó 3 Grid",
      "description": "Find the number of ways to paint a N √ó 3 grid using 3 colors without adjacent cells having the same color.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function numOfWays(n) {\n  // Your code here\n}",
      "testCases": [
        { "input": [1], "output": "12" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 95,
      "title": "Maximum Sum Circular Subarray",
      "description": "Find the maximum sum of a non-empty subarray in a circular array.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function maxSubarraySumCircular(A) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[1,-2,3,-2]], "output": "3" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 96,
      "title": "Make Array Strictly Increasing",
      "description": "Given two arrays, make the first array strictly increasing with minimal replacements using elements from the second array.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function makeArrayIncreasing(arr1, arr2) {\n  // Your code here\n}",
      "testCases": [
        { "input": [[1,5,3,6,7],[1,3,2,4]], "output": "1" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 97,
      "title": "Count Vowels Permutation",
      "description": "Count the number of strings of length n consisting of vowels following given rules.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function countVowelPermutation(n) {\n  // Your code here\n}",
      "testCases": [
        { "input": [1], "output": "5" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 98,
      "title": "Palindrome Partitioning III",
      "description": "Partition a string into k substrings such that the sum of changes to make each substring a palindrome is minimized.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function palindromePartition(s, k) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["abc", 2], "output": "1" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 99,
      "title": "Minimum Distance to Type a Word Using Two Fingers",
      "description": "Calculate the minimum distance required to type a word using two fingers on a keyboard layout.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function minimumDistance(word) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["CAKE"], "output": "3" }
      ],
      "timeLimit": 3000
    },
    {
      "id": 100,
      "title": "Longest Duplicate Substring",
      "description": "Return the longest substring of s that occurs at least twice.",
      "difficulty": "hard",
      "points": 50,
      "starterCode": "function longestDupSubstring(s) {\n  // Your code here\n}",
      "testCases": [
        { "input": ["banana"], "output": "\"ana\"" }
      ],
      "timeLimit": 3000
    }
  ]