import {motion} from 'framer-motion'
import { db, collection, query, where, getDocs, updateDoc} from "../../firebase/firebase";
import { useNavigate } from 'react-router-dom';
import useUsername from "../../hooks/useUsername";
import {
    Dialog,
    DialogContent,
    DialogClose,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
  } from "../ui/dialog"
  import { Button } from "../ui/button"
  import { Label } from '../ui/label'
  import {Input} from '../ui/input'
import { useState,useEffect } from 'react'
import toast from 'react-hot-toast';
 ////FRAMER MOTION VARIANTS
 const cardVariants={
    hidden:{opacity:0,y:50},
    visible:{opacity:1,y:0,transition:{
        delay:.2,
        duration:.9,ease:"easeInOut",
    }
    }
}
const SecondLiveCard = () => {
  const {username}=useUsername()
  const navigate=useNavigate()
  const [userName,setusername]=useState<string>('')
  const [value,setValue]=useState('')
  const [loading,setLoading]=useState(false)
  const handleChange=(e:React.ChangeEvent<HTMLInputElement>)=>{
    setValue(e.target.value)
  }
  const saved=localStorage.getItem('username')
useEffect(()=>{
  if(saved){
  setusername(saved)
}
},[])
   

const handleJoin = async (generatedRoomCode: number) =>{ 
  try{
     const usersRef = collection(db, "Rooms");
     const roomRef = query(usersRef, where("roomCode", "==", generatedRoomCode));
    const roomSnap = await getDocs(roomRef) 
    if (roomSnap.empty) 
    return toast.error('RoomCode Not Found.... ')
    
    const roomDoc = roomSnap.docs[0]
    const roomData=roomDoc.data()
    if (roomData.Onliners.length >= 2) 
    return toast.error('Room Is Filled Up')
    await updateDoc(roomDoc.ref, {
      userTwoName:username,
      userTwoOnline:true,
      Onliners:[...roomData.Onliners, !username?userName:username],
      quizHasStarted:true,
    }) 
    localStorage.setItem('Roomcode',`${generatedRoomCode}`)
    //   localStorage.setItem('Codclroomcd2',`${generatedRoomCode}`)
      toast.success('WISH YOU LUCK');
      navigate(`/pvp/${generatedRoomCode}`)
  }catch(e:any){
      console.log(e)
  }
 
    
    }
  const handleClick=()=>{
    console.log(value)
    console.log(username)
    if(value!=='')
    {
      console.log(value)
      setLoading(true)
    handleJoin(parseInt(value))
    }
    
  }
  return (
    <>
    <Dialog>
<DialogTrigger asChild>
        <motion.div initial='hidden'animate='visible' variants={cardVariants}  className={`mb-6.5 py-7 w-[335px] flex flex-col items-start justify-center md:w-[450px] md:h-[240px] bg-gradient-to-br from-[#a1f2c] to-black/70 z-50 rounded-[6px] md:px-3.5 cursor-pointer `} >

<span className='px-[13px]'>
<h2 className='text-[23px] pb-1 text-white font-semibold md:text-[24px] pt-3 text-center font-dmsans'>Search For Room</h2>
<p className='text-[#f5f5f5cb] text-center text-[15px] font-medium font-dmsans'>Join a quiz room by entering the unique code shared by the host.Find the room and get ready to play.Compete with others and win!</p>

<button className="text-black font-bold mt-4 bg-[#00ff7f] w-[300px] h-10 rounded-lg block mx-auto cursor-pointer">Search Room</button>
</span>

        </motion.div>
        </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Room Code</DialogTitle>
          <DialogDescription className='font-medium text-black'>
            Input Room Code Generated By Your Competitor
          </DialogDescription>
        </DialogHeader>
        <div className="flex items-center space-x-2">
          <div className="grid flex-1 gap-2">
            <Label htmlFor="link" className="sr-only">
              Link
            </Label>
            <Input
              id="link"
              value={value}
              onChange={(e)=>handleChange(e)}
            />
          </div>
        </div>
        <DialogFooter className="sm:justify-start">
          <DialogClose asChild>
            <Button type="button" disabled={loading} onClick={handleClick}>

              {loading?'Searching...' : 'Search'}
            </Button>
          </DialogClose>
        </DialogFooter>
      </DialogContent>
    </Dialog>
    
    
    </>
  )
}

export default SecondLiveCard